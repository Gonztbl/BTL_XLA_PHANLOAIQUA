# dominant_color.py (phiên bản nâng cấp, chuyên nghiệp)

import cv2
import os
import numpy as np
from sklearn.cluster import KMeans
import imutils
import uuid
import webcolors


# --- CÁC HÀM XÁC ĐỊNH TÊN MÀU (Không thay đổi) ---
IMAGES_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static', 'images')
os.makedirs(IMAGES_DIR, exist_ok=True)
def closest_colour(requested_colour):
    min_colours = {}
    css3_names= {
        'aliceblue': '#f0f8ff', 'antiquewhite': '#faebd7', 'aqua': '#00ffff',
        'aquamarine': '#7fffd4', 'azure': '#f0ffff', 'beige': '#f5f5dc',
        'bisque': '#ffe4c4', 'black': '#000000', 'blanchedalmond': '#ffebcd',
        'blue': '#0000ff', 'blueviolet': '#8a2be2', 'brown': '#a52a2a',
        'burlywood': '#deb887', 'cadetblue': '#5f9ea0', 'chartreuse': '#7fff00',
        'chocolate': '#d2691e', 'coral': '#ff7f50', 'cornflowerblue': '#6495ed',
        'cornsilk': '#fff8dc', 'crimson': '#dc143c', 'cyan': '#00ffff',
        'darkblue': '#00008b', 'darkcyan': '#008b8b', 'darkgoldenrod': '#b8860b',
        'darkgray': '#a9a9a9', 'darkgreen': '#006400', 'darkkhaki': '#bdb76b',
        'darkmagenta': '#8b008b', 'darkolivegreen': '#556b2f',
        'darkorange': '#ff8c00', 'darkorchid': '#9932cc', 'darkred': '#8b0000',
        'darksalmon': '#e9967a', 'darkseagreen': '#8fbc8f',
        'darkslateblue': '#483d8b', 'darkslategray': '#2f4f4f',
        'darkturquoise': '#00ced1', 'darkviolet': '#9400d3', 'deeppink': '#ff1493',
        'deepskyblue': '#00bfff', 'dimgray': '#696969', 'dodgerblue': '#1e90ff',
        'firebrick': '#b22222', 'floralwhite': '#fffaf0', 'forestgreen': '#228b22',
        'fuchsia': '#ff00ff', 'gainsboro': '#dcdcdc', 'ghostwhite': '#f8f8ff',
        'gold': '#ffd700', 'goldenrod': '#daa520', 'gray': '#808080',
        'green': '#008000', 'greenyellow': '#adff2f', 'honeydew': '#f0fff0',
        'hotpink': '#ff69b4', 'indianred': '#cd5c5c', 'indigo': '#4b0082',
        'ivory': '#fffff0', 'khaki': '#f0e68c', 'lavender': '#e6e6fa',
        'lavenderblush': '#fff0f5', 'lawngreen': '#7cfc00', 'lemonchiffon': '#fffacd',
        'lightblue': '#add8e6', 'lightcoral': '#f08080', 'lightcyan': '#e0ffff',
        'lightgoldenrodyellow': '#fafad2', 'lightgreen': '#90ee90',
        'lightgrey': '#d3d3d3', 'lightpink': '#ffb6c1', 'lightsalmon': '#ffa07a',
        'lightseagreen': '#20b2aa', 'lightskyblue': '#87cefa',
        'lightslategray': '#778899', 'lightsteelblue': '#b0c4de',
        'lightyellow': '#ffffe0', 'lime': '#00ff00', 'limegreen': '#32cd32',
        'linen': '#faf0e6', 'magenta': '#ff00ff', 'maroon': '#800000',
        'mediumaquamarine': '#66cdaa', 'mediumblue': '#0000cd',
        'mediumorchid': '#ba55d3', 'mediumpurple': '#9370db',
        'mediumseagreen': '#3cb371', 'mediumslateblue': '#7b68ee',
        'mediumspringgreen': '#00fa9a', 'mediumturquoise': '#48d1cc',
        'mediumvioletred': '#c71585', 'midnightblue': '#191970',
        'mintcream': '#f5fffa', 'mistyrose': '#ffe4e1', 'moccasin': '#ffe4b5',
        'navajowhite': '#ffdead', 'navy': '#000080', 'oldlace': '#fdf5e6',
        'olive': '#808000', 'olivedrab': '#6b8e23', 'orange': '#ffa500',
        'orangered': '#ff4500', 'orchid': '#da70d6', 'palegoldenrod': '#eee8aa',
        'palegreen': '#98fb98', 'paleturquoise': '#afeeee', 'palevioletred': '#db7093',
        'papayawhip': '#ffefd5', 'peachpuff': '#ffdab9', 'peru': '#cd853f',
        'pink': '#ffc0cb', 'plum': '#dda0dd', 'powderblue': '#b0e0e6',
        'purple': '#800080', 'rebeccapurple': '#663399', 'red': '#ff0000',
        'rosybrown': '#bc8f8f', 'royalblue': '#4169e1', 'saddlebrown': '#8b4513',
        'salmon': '#fa8072', 'sandybrown': '#f4a460', 'seagreen': '#2e8b57',
        'seashell': '#fff5ee', 'sienna': '#a0522d', 'silver': '#c0c0c0',
        'skyblue': '#87ceeb', 'slateblue': '#6a5acd', 'slategray': '#708090',
        'snow': '#fffafa', 'springgreen': '#00ff7f', 'steelblue': '#4682b4',
        'tan': '#d2b48c', 'teal': '#008080', 'thistle': '#d8bfd8',
        'tomato': '#ff6347', 'turquoise': '#40e0d0', 'violet': '#ee82ee',
        'wheat': '#f5deb3', 'white': '#ffffff', 'whitesmoke': '#f5f5f5',
        'yellow': '#ffff00', 'yellowgreen': '#9acd32'
    }

    for name, hex_code in css3_names.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(hex_code)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]


def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(tuple(requested_colour))
    except ValueError:
        closest_name = closest_colour(tuple(requested_colour))
        actual_name = None
    return actual_name, closest_name


# --- HÀM PHÂN TÍCH MÀU SẮC CHÍNH (ĐÃ NÂNG CẤP) ---

# --- HÀM PHÂN TÍCH MÀU SẮC CHÍNH (Cần thay đổi) ---
def color_of_image(filepath, bounding_box=None):
    """
    Phân tích và trích xuất các màu chủ đạo cùng tỷ lệ của chúng.

    Returns:
        tuple: (list các dict chứa thông tin màu, tên tệp ảnh kết quả đã lưu)
               Ví dụ: ([{'color': [120, 150, 30], 'percent': 0.65}, ...], 'file.jpg')
    """
    clusters = 3
    img = cv2.imread(filepath)
    if img is None:
        raise ValueError(f"Không thể đọc ảnh từ: {filepath}")

    org_img_for_display = img.copy()

    if bounding_box:
        x, y, w, h = bounding_box
        img_roi = img[y:y + h, x:x + w]
        if img_roi.size == 0:
            print(f"Cảnh báo: Vùng bounding box không hợp lệ. Phân tích toàn bộ ảnh.")
            img_roi = img
    else:
        img_roi = img

    resized_roi = imutils.resize(img_roi, height=200)
    img_rgb = cv2.cvtColor(resized_roi, cv2.COLOR_BGR2RGB)
    flat_img = np.reshape(img_rgb, (-1, 3))

    kmeans = KMeans(n_clusters=clusters, random_state=0, n_init='auto')
    kmeans.fit(flat_img)

    dominant_colors_rgb = np.array(kmeans.cluster_centers_, dtype='uint8')
    percentages = (np.unique(kmeans.labels_, return_counts=True)[1]) / flat_img.shape[0]

    # Sắp xếp và tạo cấu trúc dữ liệu mới để trả về
    sorted_data = sorted(zip(percentages, dominant_colors_rgb), key=lambda x: x[0], reverse=True)

    # *** THAY ĐỔI QUAN TRỌNG ***
    # Trả về một cấu trúc dữ liệu đầy đủ hơn, chứa cả màu và tỷ lệ %
    dominant_colors_info = [
        {'percent': percent, 'color': color.tolist()}
        for percent, color in sorted_data
    ]

    # --- Phần vẽ ảnh kết quả (giữ nguyên) ---
    rows, cols, _ = org_img_for_display.shape
    final_img_display = org_img_for_display
    overlay_height = 110
    cv2.rectangle(final_img_display, (0, rows - overlay_height), (cols, rows), (255, 255, 255), -1)
    final = cv2.addWeighted(org_img_for_display, 0.7, final_img_display, 0.3, 0)
    cv2.putText(final, 'Most Dominant Colors:', (20, rows - 80), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2,
                cv2.LINE_AA)
    start_x = 20
    for data in dominant_colors_info:
        percent_val = data['percent']
        color_rgb = data['color']
        color_bgr = color_rgb[::-1]
        end_x = start_x + 100
        cv2.rectangle(final, (start_x, rows - 60), (end_x, rows - 20), tuple(int(c) for c in color_bgr), -1)
        percent_text = f"{percent_val * 100:.1f}%"
        cv2.putText(final, percent_text, (start_x, rows - 65), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
        start_x = end_x + 20

    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    target_dir = os.path.join(BASE_DIR, 'static', 'images')
    unique_filename = str(uuid.uuid4()) + ".jpg"
    saved_image_path = os.path.join(target_dir, unique_filename)
    cv2.imwrite(saved_image_path, final)

    return dominant_colors_info, unique_filename


# --- HÀM XÁC ĐỊNH ĐỘ CHÍN (Không thay đổi) ---
# --- HÀM XÁC ĐỊNH ĐỘ CHÍN (PHIÊN BẢN CHÍNH XÁC CAO NHẤT) ---
def name_main_color(dominant_colors_info):
    """
    Xác định trạng thái XANH/CHÍN bằng cách tính điểm dựa trên tỷ lệ % của các màu.

    Args:
        dominant_colors_info (list): Một list các dictionary,
                                     ví dụ: [{'percent': 0.65, 'color': [120, 150, 30]}, ...]

    Returns:
        str: "XANH", "CHÍN", hoặc "KHÔNG XÁC ĐỊNH".
    """
    # Định nghĩa các nhóm màu bằng set để tra cứu nhanh hơn
    RIPE_COLORS = {
        # RED
        "lightsalmon", "salmon", "darksalmon", "lightcoral", "indianred", "crimson", "red", "firebrick", "darkred",
        "brown", "maroon", "tomato", "orangered", "rosybrown", "saddlebrown", "sienna",
        # ORANGE
        "orange", "darkorange", "coral", "sandybrown", "peru", "chocolate",
        # YELLOW
        "gold", "yellow", "lightyellow", "lemonchiffon", "lightgoldenrodyellow", "papayawhip", "moccasin",
        "peachpuff", "palegoldenrod", "goldenrod", "darkgoldenrod", "tan", "burlywood"
    }


    IGNORE_COLORS = {'white', 'whitesmoke', 'gainsboro', 'lightgrey', 'silver',
                     'darkgray', 'gray', 'dimgray', 'black', 'navajowhite', 'bisque'}

    # Khởi tạo điểm số
    unripe_score = 0.0
    ripe_score = 0.0

    # Lặp qua tất cả các màu chủ đạo để tính điểm
    for color_info in dominant_colors_info:
        rgb_color = color_info['color']
        percentage = color_info['percent']
        _, closest_name = get_colour_name(rgb_color)

        print(f"DEBUG: Phân tích màu '{closest_name}' (chiếm {percentage * 100:.1f}%)")

        # Bỏ qua các màu nền/trung tính
        if closest_name in IGNORE_COLORS:
            print(f"DEBUG: -> Bỏ qua màu nền/trung tính.")
            continue

        # Cộng điểm dựa trên nhóm màu và tỷ lệ %
        if closest_name in UNRIPE_COLORS:
            unripe_score += percentage
            print(f"DEBUG: -> Cộng {percentage * 100:.1f}% vào điểm XANH. Tổng điểm XANH: {unripe_score * 100:.1f}%")
        elif closest_name in RIPE_COLORS:
            ripe_score += percentage
            print(f"DEBUG: -> Cộng {percentage * 100:.1f}% vào điểm CHÍN. Tổng điểm CHÍN: {ripe_score * 100:.1f}%")

    # Đưa ra quyết định cuối cùng dựa trên tổng điểm
    print(f"\n--- KẾT QUẢ TÍNH ĐIỂM ---")
    print(f"Tổng điểm XANH (chưa chín): {unripe_score * 100:.2f}%")
    print(f"Tổng điểm CHÍN: {ripe_score * 100:.2f}%")

    # Nếu không có màu nào được tính điểm, trả về không xác định
    if unripe_score == 0 and ripe_score == 0:
        print("-> Quyết định: Không có màu sắc đặc trưng nào được tìm thấy.")
        return "KHÔNG XÁC ĐỊNH"

    # Quyết định dựa trên điểm số cao hơn
    if unripe_score > ripe_score:
        print("-> Quyết định: XANH (Điểm xanh > Điểm chín)")
        return "XANH"
    else:
        print("-> Quyết định: CHÍN (Điểm chín >= Điểm xanh)")
        return "CHÍN"